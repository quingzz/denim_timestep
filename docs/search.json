[
  {
    "objectID": "optimize_param.html",
    "href": "optimize_param.html",
    "title": "Optimize parameter",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nlibrary(denim)"
  },
  {
    "objectID": "optimize_param.html#overview",
    "href": "optimize_param.html#overview",
    "title": "Optimize parameter",
    "section": "Overview",
    "text": "Overview\nDue to being a discrete-time algorithm, denim output and performance depend on the time step used in the model. This dependency is summarized as followed:\n\nLarger time steps lead to faster run time, but output tends to deviate from the corresponding continuous-time model\nSmaller time step yield more “accurate” output but at the cost of slower run time.\n\nThis trade-off can be mitigated in 2 ways\n\nAdjust parameters: adjust parameters such that output using larger time step aligns with output from smaller one.\nPost-hoc adjustment: adjust the output to better align with smaller time step output."
  },
  {
    "objectID": "optimize_param.html#set-up",
    "href": "optimize_param.html#set-up",
    "title": "Optimize parameter",
    "section": "Set up",
    "text": "Set up\n\nModel structure\n\nModel 1Model 2\n\n\n\ndenim_mod <- denim_dsl({\n  S -> I = beta*(I/N)*S\n  I -> R = d_gamma(rate = ir_rate, shape = ir_shape)\n  I -> D = d_weibull(scale = id_scale, shape = id_shape)\n})\n\nsimulationDuration <- 40\n\ninitVals <- c(\n  S = 990, I = 10, R = 0, D = 0\n)\n\n# ==== Parameters for denim =====\nparams <- list(\n  N = 1000,\n  ir_rate = 1/3, ir_shape = 3,\n  id_scale = 10, id_shape = 1.5,\n  beta = 0.4\n)\n\n# ==== Pars for helper ======\ncomps <- c(\"S\", \"I\", \"R\", \"D\")\n\n# ==== Pars for optim ======\n# parameter and its lower + upper bound for model fitting task\npar = c(\n    beta = params$beta,\n    ir_rate = params$ir_rate,\n    ir_shape = params$ir_shape,\n    id_scale = params$id_scale,\n    id_shape = params$id_shape\n  )\nlower <- c(\n  beta = params$beta - 0.2,\n  ir_rate = params$ir_rate - 0.2,\n  ir_shape = params$ir_shape - 2,\n  id_scale = params$id_scale - 2,\n  id_shape = params$id_shape - 2\n)\nupper <- c(\n  beta = params$beta + 0.2,\n  ir_rate = params$ir_rate + 0.2,\n  ir_shape = params$ir_shape + 2,\n  id_scale = params$id_scale + 2,\n  id_shape = params$id_shape + 2\n)\n\n\n\n\ndenim_mod <- denim_dsl({\n  S -> E = beta * S * (I/N) \n  E -> I = d_gamma(rate = ei_rate, shape = ei_shape)\n  I -> R = d_gamma(rate = ir_rate, shape = ir_shape)\n})\n\ninitVals <- c(S = 999999, E = 1, I= 0, R= 0)\n\nsimulationDuration <- 180\n\n# ==== Parameters for denim =====\nparams <- list(\n  beta = 0.58,\n  N = 1e6, \n  ei_rate = 1/4, ei_shape = 2,\n  ir_rate = 1/3, ir_shape = 2)\n\n# ==== Pars for helper ======\ncomps <- c(\"S\", \"E\", \"I\", \"R\")\n\n# ==== Pars for optim ======\n# parameter and its lower + upper bound for model fitting task\npar = c(\n    beta = params$beta,\n    ei_rate = params$ei_rate,\n    ei_shape = params$ei_shape,\n    ir_rate = params$ir_rate,\n    ir_shape = params$ir_shape\n  )\nlower <- c(\n  beta = params$beta - 0.2,\n  ei_rate = params$ei_rate - 0.2,\n  ei_shape = params$ei_shape - 2,\n  ir_rate = params$ir_rate - 0.2,\n  ir_shape = params$ir_shape - 2\n)\nupper <- c(\n  beta = params$beta + 0.2,\n  ei_rate = params$ei_rate + 0.2,\n  ei_shape = params$ei_shape + 2,\n  ir_rate = params$ir_rate + 0.2,\n  ir_shape = params$ir_shape + 2\n)\n\n\n\n\n\n\nBaseline\nUse output at timeStep = 0.01 as baseline\n\n# output when timeStep == 0.01\ntimeStep <- 0.01\n\nbaseline <- sim(denim_mod, \n    initialValues = initVals,\n    parameters = params,\n    timeStep = timeStep, \n    simulationDuration = simulationDuration)\n\n# plot(baseline, ylim = c( 0, 1000))\n\n\n\nHelpers\n\n\nhelper functions\n# preprocess data \npreprocess_data <- function(baseline, out, \n                            comps = c(\"S\", \"I\", \"R\", \"D\"), \n                             normalize = TRUE){\n  baseline <- baseline %>% \n    pivot_longer(\n      cols = comps,\n      values_to = \"pop\",\n      names_to = \"comp\"\n    ) \n  out <- out %>% \n    pivot_longer(\n      cols = comps,\n      values_to = \"pop\",\n      names_to = \"comp\"\n    )\n  \n  out <- out %>% inner_join(\n    baseline,\n    by = join_by(Time == Time, comp == comp)\n  )\n  \n  # print(head(out))\n  \n  if(normalize){\n    out <- out %>% \n      group_by(Time) %>% \n      mutate(\n        pop.x = pop.x/sum(pop.x),\n        pop.y = pop.y/sum(pop.y)\n      ) %>% \n      ungroup()\n  }\n  \n  out\n}\n\n# helper for computing accuracy\n# baseline is the output of baseline model (usually output when baseline = 0.001)\ncompute_accuracy <- function(data, error = \"mae\"){\n  if(error!= \"mae\" & error != \"mse\"){\n    stop(\"`error` must be either `mae` for Mean Absolute Error or `mse` for Mean Squared Error\")\n  }\n  \n  data %>% \n    mutate(\n      diff = if(error == \"mae\"){abs(pop.y - pop.x)} else{(pop.y - pop.x)**2}\n    ) %>% \n    summarize(\n      mse = sum(diff, na.rm = TRUE)/n()\n    ) %>% \n    pull(mse)\n}\n\nplot_compare <- function(data){\n  data %>% \n    ggplot() +\n      geom_point(\n        aes(pop.x, pop.y),\n        color = \"cornflowerblue\",\n        shape = 20\n      ) + \n      geom_line(\n        aes(pop.x, pop.x),\n        color = \"red\",\n        linetype = \"dashed\"\n      ) + \n      facet_wrap(~comp, scales=\"free\") +\n      labs(\n        x = \"Baseline\",\n        y = \"Model\"\n      )\n}\n\nplot_output <- function(data){\n  data %>% \n    ggplot() +\n      geom_line(\n        aes(x = Time, y = pop.x),\n        color = \"cornflowerblue\"\n      ) + \n      geom_line(\n        aes(x = Time, y = pop.y),\n        color = \"red\",\n        linetype = \"dashed\"\n      ) + \n      facet_wrap(~comp, scales=\"free\") +\n      labs(\n        x = \"Time\",\n        y = \"Prop\"\n      )\n}"
  },
  {
    "objectID": "optimize_param.html#adjust-parameters",
    "href": "optimize_param.html#adjust-parameters",
    "title": "Optimize parameter",
    "section": "Adjust parameters",
    "text": "Adjust parameters\n\nFit model\nTry fitting model with timeStep = 0.5 to output generated with timeStep = 0.01\n\nnewTimeStep <- 0.5\n\n\n\nCode for fitting model\ntarget_function <- function(par){\n  par <- as.list(par)\n  new_params <- modifyList(params, par)\n  \n  out <- sim(\n    denim_mod,\n    initialValues = initVals,\n    parameters = new_params,\n    timeStep = newTimeStep,\n    simulationDuration = simulationDuration\n  )\n  \n  preprocess_data(baseline, out = out, comps = comps) %>% \n    compute_accuracy(error = \"mse\")\n}\n\noptim_out <- optim(\n  par = par,\n  target_function,\n  method = \"L-BFGS-B\",\n  lower = lower,\n  upper = upper\n)\n\n\nCompare fitted parameters and parameters used to generate baseline (i.e. model with timeStep = 0.01)\n\n# fitted parameters\noptim_out$par\n\n     beta   ei_rate  ei_shape   ir_rate  ir_shape \n0.5935301 0.2639418 1.9925592 0.3563711 1.9976359 \n\n# parameters used for generating baseline\nparams\n\n$beta\n[1] 0.58\n\n$N\n[1] 1e+06\n\n$ei_rate\n[1] 0.25\n\n$ei_shape\n[1] 2\n\n$ir_rate\n[1] 0.3333333\n\n$ir_shape\n[1] 2\n\n\n\n\nCompare output\nCompare output of model using timeStep = 0.5 and fitted parameters (parameters from optim) vs parameter used for generating baseline\n\nParameters from optimOld parameters\n\n\n\nnew_pars <- modifyList(params, as.list(optim_out$par))\n\nout <- sim(denim_mod, \n  initialValues = initVals,\n  parameters = new_pars,\n  timeStep = newTimeStep, \n  simulationDuration = simulationDuration)\n\npreprocess_data(baseline, out = out, comps = comps) %>% \n  plot_compare()\n\n\n\npreprocess_data(baseline, out = out, comps = comps) %>% \n  plot_output()\n\n\n\npreprocess_data(baseline, out = out, comps = comps) %>% \n  compute_accuracy()\n\n[1] 0.001574152\n\n\n\n\n\nout_oldparams <- sim(denim_mod, \n  initialValues = initVals,\n  parameters = params,\n  timeStep = newTimeStep, \n  simulationDuration = simulationDuration)\n\npreprocess_data(baseline, out = out_oldparams, comps = comps) %>% \n  plot_compare()\n\n\n\npreprocess_data(baseline, out = out_oldparams, comps = comps) %>% \n  plot_output()\n\n\n\npreprocess_data(baseline, out = out_oldparams, comps = comps) %>% \n  compute_accuracy()\n\n[1] 0.01038771\n\n\n\n\n\n\n\nDiscussion\nIt is possible to adjust parameters such that output using timeStep = 0.5 can match output using timeStep = 0.01.\nThis means that depending on how denim is used, the issue of longer run time due to the need for smaller timeStep may be trivial.\nDenim use cases could be categorized into 2 groups:\n\nModel fitting: If the task at hand is to fit the model to a dataset, it is better to use larger timeStep where run time is fast enough, but still small enough for a smooth output + convergence. Just be aware that the fitted parameters may varies slightly depending on the timeStep used.\nSimulation: If users need to simulate a model with a set of parameters derived from a continuous time estimates, it is better to use small timeStep (where issue of longer run time persists)."
  },
  {
    "objectID": "optimize_param.html#adjust-output",
    "href": "optimize_param.html#adjust-output",
    "title": "Optimize parameter",
    "section": "Adjust output",
    "text": "Adjust output\n\nCorrelation between error and timeStep\nPlotting MAE shows that the divergence in output does linearly correlates with grow in timeStep but only within smaller range of timeStep (typically [0-1]) but gets unpredictable as timeStep becomes larger than that range\n\n\nCode for compute MSE at different timeStep\ndt_acc <- data.frame(\n    dt = seq(0.05, 5, 0.05)\n  ) %>% \n  mutate(\n    mae = map_dbl(dt, \\(curr_dt){\n      \n      curr_out <- sim(\n        denim_mod,\n        initialValues = initVals,\n        parameters = params,\n        simulationDuration = simulationDuration,\n        timeStep = curr_dt\n      )\n      \n      preprocess_data(baseline, out = curr_out, comps = comps) %>% \n        compute_accuracy()\n    })\n  )\n\ndt_acc %>% \n  ggplot(\n    aes(\n      x = dt, y = mae\n    )\n  ) +\n  geom_point(color = \"cornflowerblue\", shape = 20) +\n  labs(\n    title = \"Correlation between timeStep and error\",\n    x = \"timeStep\",\n    y = \"Mean Absolute Error\"\n  )\n\n\n\n\n\nCode for compute MSE at different timeStep\n# ggsave(\"figures/dt_error.png\", width = 8, height = 5, dpi = 300)\n\n\n\n\nChange in output\nVisualize difference between output using timeStep = 0.01 and timeStep = 0.5 using the same set of parameters\n\n\nCode for plotting\npreprocess_data(baseline, out_oldparams, comps = comps) %>% \n  mutate(\n    diff = pop.y - pop.x\n  ) %>% \n  ggplot() +\n    geom_line(\n      aes(x = Time, y = diff),\n      color = \"red\"\n    ) +\n    geom_hline(\n      yintercept = 0,\n      linetype = \"dashed\"\n    ) +\n    facet_wrap(~ comp) +\n    labs(\n      title = \"Difference between baseline and output\",\n      x = \"(Simulation) Time\",\n      y = \"Baseline - Output\"\n    )\n\n\n\n\n\nCode for plotting\n# ggsave(\"figures/visualize_incorrectness.png\", width = 8, height = 5, dpi = 300)"
  }
]